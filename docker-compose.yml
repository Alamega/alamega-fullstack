services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_password}
      POSTGRES_DB: ${POSTGRES_DB:-postgres_db}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres_user} -d ${POSTGRES_DB:-postgres_db}" ]
      timeout: 10s
      interval: 5s
      retries: 5
      start_period: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  backend:
    build: ./backend
    ports:
      - "8080:8080"
    environment:
      JDBC_URL: jdbc:postgresql://db:5432/${POSTGRES_DB:-postgres_db}?user=${POSTGRES_USER:-postgres_user}&password=${POSTGRES_PASSWORD:-postgres_password}
      JWT_SECRET: ${JWT_SECRET:-SECRET}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-ALAMEGA}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - maven_cache:/root/.m2
    networks:
      - app-network

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      INTERNAL_BACKEND_URL: http://backend:8080
      NEXT_PUBLIC_BACKEND_URL: http://localhost:8080
      NEXT_SERVER_ACTIONS_ENCRYPTION_KEY: YLj1hAUGheMPZNo3ixrmSAdl+uQJVWgeCv8ilKydQxY=
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - npm_cache:/app/node_modules
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  maven_cache:
  npm_cache: