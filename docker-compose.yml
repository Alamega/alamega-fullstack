services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_password}
      POSTGRES_DB: ${POSTGRES_DB:-postgres_db}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres_user} -d ${POSTGRES_DB:-postgres_db}" ]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  backend:
    build: ./backend
    environment:
      JDBC_URL: jdbc:postgresql://db:5432/${POSTGRES_DB:-postgres_db}?user=${POSTGRES_USER:-postgres_user}&password=${POSTGRES_PASSWORD:-postgres_password}
      JWT_SECRET: ${JWT_SECRET:-SECRET}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-Alamega}
      TG_BOT_NAME: ${TG_BOT_NAME}
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
      TG_ADMIN_CHAT_ID: ${TG_ADMIN_CHAT_ID}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "bash -c '</dev/tcp/localhost/8080'" ]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s
    volumes:
      - maven_cache:/root/.m2
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      args:
        INTERNAL_BACKEND_URL: http://backend:8080
        NEXT_PUBLIC_BACKEND_URL: /api
    environment:
      NEXT_SERVER_ACTIONS_ENCRYPTION_KEY: ${NEXT_SERVER_ACTIONS_ENCRYPTION_KEY:-YLj1hAUGheMPZNo3ixrmSAdl+uQJVWgeCv8ilKydQxY=}
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:3000 || exit 1" ]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s
    volumes:
      - npm_cache:/app/node_modules
    networks:
      - app-network

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s
    networks:
      - app-network

  alloy:
    image: grafana/alloy:${GRAFANA_ALLOY_VERSION:-v1.8.2}
    volumes:
      - ./monitoring/config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    networks:
      - app-network

  loki:
    image: grafana/loki:${GRAFANA_LOKI_VERSION:-3.5.0}
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-v3.3.0}
    command:
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-11.6.1}
    environment:
      GF_SECURITY_ADMIN_USER: ${ADMIN_USERNAME:-ALAMEGA}
      GF_SECURITY_ADMIN_PASSWORD: "1111"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
    volumes:
      - ./monitoring/grafana-ds.yaml:/etc/grafana/provisioning/datasources/ds.yaml
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3000:3000"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  maven_cache:
  npm_cache: